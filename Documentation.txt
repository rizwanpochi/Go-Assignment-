Documentation for the code
Introduction
This code represents an HTTP server written in Go, which has 3 endpoints for creating, updating and retrieving orders from a MySQL database.

Dependencies
The code depends on the following packages:

"database/sql" for working with databases and SQL statements
"encoding/json" for encoding and decoding JSON data
"log" for logging messages
"net/http" for handling HTTP requests and responses
"time" for working with date and time values
"github.com/go-chi/chi" for working with the HTTP router
"github.com/go-chi/chi/middleware" for adding middleware to the router
"github.com/go-sql-driver/mysql" for working with the MySQL database
Types
Order
The Order type is a struct that represents an order. It has the following fields:

ID (string): the ID of the order
Status (string): the status of the order
Items ([]OrderItem): a slice of OrderItem structs that represent the items in the order
Total (float64): the total cost of the order
CurrencyUnit (string): the currency unit used for the total cost
CreatedAt (time.Time): the date and time the order was created
UpdatedAt (time.Time): the date and time the order was last updated
OrderItem
The OrderItem type is a struct that represents an item in an order. It has the following fields:

ID (string): the ID of the item
Description (string): a description of the item
Price (float64): the price of the item
Quantity (int): the quantity of the item
Functions
main()
The main() function sets up the HTTP server and defines the routes for handling requests. The following routes are defined:

POST /orders: creates a new order in the database
PUT /orders/{id}: updates the status of an existing order in the d=tabase
GET /orders: retrieves a list of orders from the database
connectToDB()
The connectToDB() function returns a connection to the MySQL database.

handleCreateOrder(w http.ResponseWriter, r *http.Request)
The handleCreateOrder() function handles the POST /orders route. It parses the order data from the request body, validates it, and inserts the order into the database. If the order data is invalid or there is an error inserting the order into the database, an error response is sent. If the order is created successfully, the ID of the created order is returned in the response.

handleUpdateOrder(w http.ResponseWriter, r *http.Request)
The handleUpdateOrder() function handles the PUT /orders/{id} route. It gets the ID of the order to update from the URL path, parses the updated order data from the request body, and updates the order in the database. If there is an error updating the order in the database, an error response is sent. If the order is updated successfully, a success response is sent.

handleGetOrders(w http.ResponseWriter, r *http.Request)
The handleGetOrders() function handles the GET /orders route. It retrieves a list of orders from the database, sorts and filters the orders based on the request parameters, and returns the orders in the response. If there is an error retrieving the orders from the database, an error response is sent.

Setting up Database in MySql

Install MySQL: You can download the MySQL community server from the official website of MySQL.

Open the MySQL client and connect to the MySQL server with the following command:
css
mysql -u root -p

Navigate to the directory where you saved the orders.sql file using the following command:
cd /path/to/sql/file/

Import the orders.sql file into the MySQL server with the following command:
source orders.sql;

This will create the necessary tables for the orders database.

Now that the database is set up, you can update the database connection string in the Go code to connect to the 'orders' database:
db, err := sql.Open("mysql", "orders_user:password@tcp(localhost:3306)/orders")


